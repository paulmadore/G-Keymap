/*  lineaksetup - Configuration Utility for the LinEAK daemon
 *  Copyright (C) 2005  Alex Brick
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package org.cabhan.lineaksetup;

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.*;

import java.util.HashMap;

/**
 * Generates a GUI that prompts the user to confirm his command choices
 * @author Alex Brick
 * @version 0.1
 */
public class ConfirmWindow implements SelectionListener
{
    private Shell s;
    private Button prev;
    private Button next;
    
    /**
     * Generates the GUI and displays it
     * @param d the <code>Display</code> to attach to
     */
    public ConfirmWindow(Display d)
    {
        HashMap keyToCommand = Driver.getMap();
        String[] allKeys = Driver.getKeys();
        
        s = new Shell(d);
        s.setText("LinEAK Configuration Utility");
        s.setLayout(new RowLayout(SWT.VERTICAL));
        
        Label instructions = new Label(s, SWT.WRAP);
        instructions.setText("Please Confirm That These Are the Commands You Wish To Use.");
        
        ScrolledComposite sc = new ScrolledComposite(s, SWT.BORDER|SWT.V_SCROLL|SWT.FULL_SELECTION);
        sc.setLayout(new FillLayout());
        RowData scData = new RowData();
        scData.height = 600;
        sc.setLayoutData(scData);
        
        Composite c1 = new Composite(sc, SWT.NONE);
        sc.setContent(c1);
        c1.setLayout(new GridLayout(2,false));
        
        for(int i = 0; i < allKeys.length; i++)
        {
            Label theKey = new Label(c1, SWT.SINGLE);
            theKey.setText(allKeys[i]);
            
            Text theCommand = new Text(c1, SWT.SINGLE);
            theCommand.setText((String) keyToCommand.get(allKeys[i]));
            theCommand.setEditable(false);
            
            GridData gData = new GridData();
            gData.widthHint = 400;
            theCommand.setLayoutData(gData);
            
            Label separator = new Label(c1, SWT.SEPARATOR|SWT.HORIZONTAL);
            GridData sData = new GridData(GridData.FILL_HORIZONTAL);
            sData.horizontalSpan = 2;
            separator.setLayoutData(sData);
        }
        
        c1.setSize(c1.computeSize(SWT.DEFAULT, SWT.DEFAULT));
        
        Composite c2 = new Composite(s, SWT.NONE);
        c2.setLayout(new RowLayout(SWT.HORIZONTAL));
        
        prev = new Button(c2, SWT.PUSH);
        prev.setText("<< Previous");
        prev.addSelectionListener(this);
        
        next = new Button(c2, SWT.PUSH);
        next.setText("Next >>");
        next.addSelectionListener(this);
        
        s.pack();
        s.open();
        
        while(!s.isDisposed())
            if(!d.readAndDispatch())
                d.sleep();
            d.dispose();
    }
    
    /**
     * A basic test program
     * @param args commandline arguments
     */
    public static void main(String[] args)
    {
        Display d = new Display();
        ConfirmWindow confirm = new ConfirmWindow(d);
    }
    
    /**
     * Handles all <code>SelectionEvent</code>'s generated by this GUI
     */
    public void widgetSelected(SelectionEvent e)
    {
        if(e.getSource() == prev)
        {
            s.dispose();
            Driver.setCommands();
        }
        else if(e.getSource() == next)
        {
            MessageBox message = new MessageBox(s, SWT.ICON_QUESTION|SWT.YES|SWT.NO);
            message.setText("Are You Sure?");
            message.setMessage("Are You Sure That These Commands Are Correct?");
            
            int response = message.open();
            
            if(response == SWT.YES)
            {
                s.dispose();
                Driver.decideLocation();
            }
        }
    }
    
    /**
     * Exists soley to satisfy the <code>SelectionListener</code> interface
     */
    public void widgetDefaultSelected(SelectionEvent e)
    {
        // empty
    }
}