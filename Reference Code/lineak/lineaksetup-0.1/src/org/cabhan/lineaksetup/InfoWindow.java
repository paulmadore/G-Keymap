/*  lineaksetup - Configuration Utility for the LinEAK daemon
 *  Copyright (C) 2005  Alex Brick
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package org.cabhan.lineaksetup;

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.layout.*;
import org.eclipse.swt.events.*;

import java.io.*;

/**
 * Generates a GUI that prompts the user for mixer and CD device information
 * @author Alex Brick
 * @version 0.1
 */
public class InfoWindow implements SelectionListener
{
    private Shell s;
    private Text mixer;
    private Text cd;
    private Button next;
    
    /**
     * Generates the GUI and displays it
     * @param d the <code>Display</code> to attach to
     */
    public InfoWindow(Display d)
    {
        s = new Shell(d);
        s.setLayout(new RowLayout(SWT.VERTICAL));
        s.setText("LinEAK Configuration Utility");
        
        String mixerLoc = findMixer();
        
        Label mixDirections = new Label(s, SWT.WRAP);
        Composite c1 = new Composite(s, SWT.NONE);
        c1.setLayout(new GridLayout(2,false));
        Label mixLabel = new Label(c1, SWT.NONE);
        mixLabel.setText("Mixer Device: ");
        mixer = new Text(c1, SWT.SINGLE|SWT.BORDER);
        GridData mixData = new GridData();
        mixData.widthHint = 300;
        mixer.setLayoutData(mixData);
        
        if(mixerLoc == null)
        {
            mixDirections.setText("We cannot autodetect your Mixer Device.\n\n" +
                    "Please enter the location of your mixer device.");
        }
        else
        {
            mixDirections.setText("We have automatically detected the location of your " +
                    "Mixer device.");
            
            mixer.setText(mixerLoc);
            mixer.setEditable(false);
        }
                
        
        Label cdDirections = new Label(s, SWT.WRAP);
        cdDirections.setText("\nPlease Enter Your CD Device\n\n" +
                "Possible CD Devices are:\n" + 
                "/dev/cdrom, /dev/cdroms/cdrom0, /dev/hdc, etc.");
        
        Composite c2 = new Composite(s, SWT.NONE);
        c2.setLayout(new GridLayout(2,false));
        
        Label cdLabel = new Label(c2, SWT.NONE);
        cdLabel.setText("CD Device: ");
        
        cd = new Text(c2, SWT.SINGLE|SWT.BORDER);
        GridData cdData = new GridData();
        cdData.widthHint = 315;
        cd.setLayoutData(cdData);
        //cd.setText("/dev/cdrom");
        
        next = new Button(s, SWT.PUSH);
        next.setText("Next >>");
        next.addSelectionListener(this);
        
        s.pack();
        s.open();
        
        while(!s.isDisposed())
            if(!d.readAndDispatch())
                d.sleep();
            d.dispose();
    }
    
    /**
     * Looks in the default location for the Mixer device
     * @return the location of the Mixer device if found, or null otherwise
     */
    private String findMixer()
    {
        String loc1 = new String("/dev/mixer");
        
        File theLoc = new File(loc1);
        
        if(theLoc.exists())
            return loc1;
        
        return null;
    }
    
    /**
     * A basic test program
     * @param args commandline arguments
     */
    public static void main(String[] args)
    {
        Display d = new Display();
        InfoWindow info = new InfoWindow(d);
    }
    
    /**
     * Handles all <code>SelectionEvent</code>'s generated by this GUI
     */
    public void widgetSelected(SelectionEvent e)
    {
        if(e.getSource() == next)
        {
            String mixText = mixer.getText();
            
            if(mixText.length() == 0)
            {
                MessageBox message = new MessageBox(s, SWT.ICON_ERROR);
                message.setText("No Mixer!!");
                message.setMessage("You Didn't Enter A Mixer Device!!");
                
                message.open();
                return;
            }
            
            String cdText = cd.getText();
            
            if(cdText.length() == 0)
            {
                MessageBox message = new MessageBox(s, SWT.ICON_ERROR);
                message.setText("No CD Device!!");
                message.setMessage("You Didn't Enter A CD Device!!");
                
                message.open();
                return;
            }
            
            try
            {
                File mixerDevice = new File(mixText);
                if(!mixerDevice.exists())
                {
                    MessageBox message = new MessageBox(s, SWT.ICON_ERROR);
                    message.setText("No Mixer!!");
                    message.setMessage("Your Mixer Device Doesn't Exist!!");
                    
                    message.open();
                    return;
                }
                
                File cdDevice = new File(cdText);
                if(!cdDevice.exists())
                {
                    MessageBox message = new MessageBox(s, SWT.ICON_ERROR);
                    message.setText("No CD Device!!");
                    message.setMessage("Your CD Device Doesn't Exist!!");
                    
                    message.open();
                    return;
                }
                
                Driver.setMixer(mixText);
                Driver.setCD(cdText);
                s.dispose();
                Driver.handleTypes();
            }
            catch(SecurityException i)
            {
                MessageBox message = new MessageBox(s, SWT.ICON_ERROR);
                message.setText("SecurityException!");
                message.setMessage("The File You Entered is Unreadable!!");
                
                message.open();
                return;
            }
            
        }
    }
    
    /**
     * Exists soley to satisfy the <code>SelectionListener</code> interface
     */
    public void widgetDefaultSelected(SelectionEvent e)
    {
        // empty
    }
}