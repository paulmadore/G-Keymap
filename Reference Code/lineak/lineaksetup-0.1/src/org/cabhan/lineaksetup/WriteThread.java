/*  lineaksetup - Configuration Utility for the LinEAK daemon
 *  Copyright (C) 2005  Alex Brick
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package org.cabhan.lineaksetup;

import java.io.*;
import java.util.HashMap;
import java.util.regex.*;

import org.eclipse.swt.*;
import org.eclipse.swt.widgets.*;

/**
 * Generates a Thread that writes the configuration file.
 * @author Alex Brick
 * @version 0.1
 */
public class WriteThread extends Thread
{
    private Shell s;
    
    private FileWriter writer;
    private String[] keys;
    private HashMap map;
    
    /**
     * Creates the Thread and attaches it to the given Display
     * @param d the Display to attach to
     */
    public WriteThread(Display d)
    {
        s = new Shell(d);
        
        writer = initializeWriter();
        keys = Driver.getKeys();
        map = Driver.getMap();
    }
    
    /**
     * Creates a new FileWriter and handles all Exceptions
     * @return the FileWriter to be used
     */
    private FileWriter initializeWriter()
    {
        try
        {
            FileWriter myWriter = new FileWriter(Driver.getWriteLocation());
            
            return myWriter;
        }
        catch(IOException e)
        {
            MessageBox message = new MessageBox(s, SWT.ICON_ERROR);
            message.setText("IOException!!");
            message.setMessage("Unspecified Input/Output Exception!!");
            
            message.open();
            System.exit(1);
        }
        
        return null;
    }
    
    /**
     * The code to be executed when the Thread is run
     */
    public void run()
    {
        try
        {
	        writer.write("# LinEAK - Linux support for Easy Access and Internet Keyboards\n");
	        writer.write("#  Copyright (c) 2001,2002, 2003 Sheldon Lee Wen <leewsb@hotmail.com>\n");
            writer.write("#          and Mark Smulders <Mark@PIRnet.nl>\n");
	        writer.write("#  http://lineak.sourceforge.net\n#\n");
	        
	        writer.write("# LinEAK Configuration File\n#\n");
	        
	        writer.write("# Example Key Configuration:\n");
	        writer.write("#\t\tplay\t= \"xmms --play-pause\"\n");
	        writer.write("#\t\teject\t= EAK_EJECT\n#\n");
	
	        writer.write("# Available Special Actions:\n");
	        writer.write("#\t\tEAK_EJECT\n");
	        writer.write("#\t\tEAK_VOLUP\n");
	        writer.write("#\t\tEAK_VOLDOWN\n");
	        writer.write("#\t\tEAK_MUTE\n");
	        writer.write("#\t\tEAK_SLEEP\n#\n");
	
	        writer.write("# LinEAK Configuration for " + Driver.getFullName() + "\n");
	        writer.write("# (generated by lineaksetup)\n\n");
	        
	        writer.write("# Global Settings\n");
	        writer.write("KeyboardType\t\t= " + Driver.getCode() + "\n");
	        writer.write("CdromDevice\t\t= " + Driver.getCD() + "\n");
	        writer.write("MixerDevice\t\t= " + Driver.getMixer() + "\n\n");
	        
	        writer.write("# Specific Keys of Your Keyboard\n");
	        
	        for(int i = 0; i < keys.length; i++)
	        {
	            String currentKey = keys[i];
	            String command = (String) map.get(currentKey);
	            
	            Pattern p = Pattern.compile("\"");
	            Matcher m = p.matcher(command);
	            command = m.replaceAll("'");
	            
	            writer.write(currentKey + "\t\t= \"" + command + "\"\n");
	        }
	        
	        writer.write("\n# End of LinEAK Configuration File\n");
	        
	        writer.close();
        }
        
        catch(IOException e)
        {
            MessageBox message = new MessageBox(s, SWT.ICON_ERROR);
            message.setText("IOException!!");
            message.setMessage("Unspecified Input/Output Exception!!");
            
            message.open();
            System.exit(1);
        }
    }
}
